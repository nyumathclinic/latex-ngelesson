% \iffalse meta-comment
% !TEX program  = pdfLaTeX
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
The NGE Lesson Bundle
E-mail: leingang@courant.nyu.edu
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This bundle contains the class files I use for producing class lessons.

* ngelessonslides - slides for projection (derives from beamer)
* ngelessonhandout - slides for handout (derives from beamer with the handout option)
* ngelessonplan - lecture notes for the lecturer (derives from article with the beamerarticle package)
* ngelessonworksheet - worksheets for in-class assessments.

This code is provided with no warranty.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
The NGE Lesson Bundle
E-mail: leingang@courant.nyu.edu
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2011 by Matthew Leingang <leingang@courant.nyu.edu>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
You.

This work consists of the file  ngelesson.dtx
and the derived files           ngelesson.ins,
                                ngelesson.pdf,
                                ngelessonslides.cls,
                                ngelessonhandout.cls,
                                ngelessonplan.cls, and
                                ngelessonworksheet.cls

\endpostamble
\usedir{tex/latex/ngelesson}
\write18{sh ./vc}
\generate{
  \file{\jobname slides.cls}{\from{\jobname.dtx}{classes,slides}}
  \file{\jobname handout.cls}{\from{\jobname.dtx}{classes,handout}}
  \file{\jobname plan.cls}{\from{\jobname.dtx}{classes,plan}}
  \file{\jobname worksheet.cls}{\from{\jobname.dtx}{classes,worksheet}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/ngelesson}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/ngelesson}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\write18{mv README.txt README}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*classes>
\NeedsTeXFormat{LaTeX2e}
%<classes>\ProvidesClass
%<slides>{ngelessonslides}
%<handout>{ngelessonhandout}
%<plan>{ngelessonplan}
%<worksheet>{ngelessonworksheet}
%<classes>[2011/01/30 v0.1 MPL]
%</classes>
%<*driver>
\documentclass{ltxdoc}
\RequirePackage[T1]{fontenc}
\RequirePackage{lmodern}
%\RequirePackage{\jobname}
\RequirePackage[numbered]{hypdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\newcommand{\cls}[1]{\textsf{#1}}
\newcommand{\pkg}[1]{\textsf{#1}}
\newcommand{\clo}[1]{\texttt{#1}}
\newcommand{\env}[1]{\texttt{#1}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% 
%\GetFileInfo{\jobname slides.cls}
%
%\title{^^A
%  The \textsf{ngelesson} bundle\thanks{^^A
%    This file describes version \fileversion, last revised \filedate.^^A
%  }^^A
%}
%\author{^^A
%  Matthew Leingang\thanks{E-mail: leingang@courant.nyu.edu}^^A
%}
%\date{Released \filedate}
%
%\maketitle
%
% \changes{v1.0.0}{2009/10/06}{First public release}
%
% \part*{Interface}
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
% \part*{Implementation}
%
%    \begin{macrocode}
%<*classes>
%    \end{macrocode}
%
% \section{Requirements}
%    \begin{macrocode}
\RequirePackage{cancel}
\RequirePackage{clock}\ClockFrametrue
\RequirePackage{graphicx}
\RequirePackage{enumerate}
\RequirePackage{epstopdf}
\RequirePackage{leintex2e}
\RequirePackage{nicefrac}
\RequirePackage{pdfpages}
\RequirePackage{snapshot}
%\RequirePackage{txtunits}
\RequirePackage{units}
\RequirePackage{verbatim}
\RequirePackage{array}
\RequirePackage{tikz}
\RequirePackage{url}
%<plan>\PassOptionsToPackage{override}{xcolor}
%    \end{macrocode}
%
% \section{Class Options}
% 
% \begin{macro}{bigmath}
% Set all math in display style, so fractions are bigger.  This is the ngelesson default
%    \begin{macrocode}
\DeclareOption{bigmath}{
    \everymath\expandafter{\the\everymath\displaystyle}
}
\ExecuteOptions{bigmath}
%    \end{macrocode}
% \end{macro}
% Set all (inline) math as text style, which is the normal way.
% \begin{macro}{nobigmath}
%    \begin{macrocode}
\DeclareOption{nobigmath}{
    \everymath\expandafter{\the\everymath\textstyle}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{solutions}
% In worksheet mode, the solutions option turns on the display of solutions.  
% This option is not present in the other classes.
%    \begin{macrocode}
%<*worksheet>
\newboolean{worksheetsolutions}
\setboolean{worksheetsolutions}{false}
\DeclareOption{solutions}{
    \setboolean{worksheetsolutions}{true}    
}
%</worksheet>
%    \end{macrocode}
% \end{macro}
%
% Default: pass to base class
%    \begin{macrocode}
\newcommand\ngelesson@baseclass
%<slides|handout>{beamer}
%<plan|worksheet>{article}
%    \begin{macrocode}
\DeclareOption*{% 
	\PassOptionsToClass{\CurrentOption}{\ngelesson@baseclass}%
}
\ProcessOptions\relax
%    \end{macrocode}
%
% \section{The base class}
% 
% 
%    \begin{macrocode}
%<handout>\PassOptionsToClass{handout}{beamer}
\LoadClass{\ngelesson@baseclass}
%<plan>\RequirePackage{beamerarticle}
%    \end{macrocode}
%
% \section{Declarations}
% \subsection{Key Management}
%    \begin{macrocode}
\newcommand{\ngelset}[1]{%
	\pgfqkeys{/nge lesson}{#1}
}
%    \end{macrocode}
%
% \subsection{Metadata}
%
% \begin{macro}{title}
% options
% - short title
% - lesson number
% - textbook section
% 
%    \begin{macrocode}
\ngelset{
  short title/.store in      = \ngelesson@shorttitle,
  long title/.store in       = \ngelesson@longtitle,
  lesson number/.store in    = \ngelesson@lessonnumber,
  textbook section/.store in = \ngelesson@textbooksection
}
\renewcommand{\title}[2][]{
    \ngelset{short title=#2,long title=#2}
%:TODO: - no key=short title
%    \ngelset{.unknown/.style={short title=\pgfkeyscurrentname}}
    \ngelset{#1}
%    \end{macrocode}
%  Beamer stores its long- and short-form titles in macros
% \verb|\inserttitle| and \verb|\beamer@shorttitle|, respectively.
%
%    \begin{macrocode}  
    \def\inserttitle{%
        \ifx\ngelesson@textbooksection\@empty%
        \else%
          Section \ngelesson@textbooksection \\
        \fi%
          #2%
    }
    \def\beamer@shorttitle{%
        \ifx\ngelesson@textbooksection\@empty%
        \else%
          Section \ngelesson@textbooksection: %
        \fi%
          \ngelesson@shorttitle%    
    } 
%    \end{macrocode}
% The lesson plan, being derived from \cls{article}, needs to set the macro \verb|\@title|.       
%    \begin{macrocode}
%<plan>\let\@title\inserttitle
%    \end{macrocode}
% The worksheet is also derived from \cls{article}, but we add the words ``Worksheet from'' first.
%    \begin{macrocode}
%<worksheet>\def\@title{Worksheet for \inserttitle}
%    \end{macrocode}
% End of the \verb|\title| macro.
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{course}
% Set the name and other properties of the course that the lesson belongs to.
% Optional keys:
% \begin{description}
% \item[code] A machine-like code for the course (e.g., ``Math 1a'' or ``V63.0121'')
% \item[section] A code for the section of the course
% \end{description}
%    \begin{macrocode}
\let\insertcoursename\@empty
\let\ngelesson@course@code\@empty
\let\insertcoursesectionnumber\@empty
\ngelset{
    course/.cd,
    code/.store in=\ngelesson@course@code,
    section/.store in=\insertcoursesectionnumber,
    name/.store in=\insertcoursename
}
\newcommand{\course}[2][]{
    \ngelset{course/.cd,#1,name=#2}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{term}
% Set the term of the course that the lesson belongs to.
% Optional keys:
% \begin{description}
%  \item[code] A machine-like code for the term.
% \end{description}
%    \begin{macrocode}
\let\ngelesson@term\@empty
\let\netlesson@term@code\@empty
\ngelset{term/.cd,
    name/.store in=\ngelesson@term,
    code/.store in=\ngelesson@term@code
}
\newcommand{\term}[2][]{
    \ngelset{term/.cd,#1,name=#2}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\author}
% Set the author name.  The course is prepended automatically.
%    \begin{macrocode}
\def\author{\@dblarg\beamer@author}
\long\def\beamer@author[#1]#2{%
    % append course name/code/section
    \def\ngelesson@authorprefix{
        \ifx\ngelesson@course@code\@empty%
        \else%
            \ngelesson@course@code%
            \ifx\insertcoursesectionnumber\@empty%
            \else%
                .\insertcoursesectionnumber
            \fi%
        \fi:
        \insertcoursename%    
    }
    \def\beamer@shortauthor{\ngelesson@authorprefix}
    \def\insertauthor{\def\inst{\beamer@insttitle}\def\and{\beamer@andtitle}\ngelesson@authorprefix \\ #2}%
%    \end{macrocode}
% In the beamer modes this adds metadata to the PDF
%    \begin{macrocode}
%<*slides|handout>    
    \ifbeamer@autopdfinfo%
        \def\beamer@andstripped{}%
        \beamer@stripands#2 \and\relax
        {\let\inst=\@gobble\let\thanks=\@gobble\def\and{, }\hypersetup{pdfauthor={\beamer@andstripped}}}
    \fi%
%</slides|handout>    
%    \end{macrocode}
% The lesson plan, being derived from \cls{article}, needs to set the macro \verb|\@author|.       
%    \begin{macrocode}
%<*plan>
    \let\@author\insertauthor
%</plan>
%    \end{macrocode}
% The worksheet is also derived from \cls{article} but just needs the course name.
%    \begin{macrocode}
%<*worksheet>
    \let\@author\beamer@shortauthor
%</worksheet>
%    \end{macrocode}
% End of the \verb|\author| macro.
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\institute}
% Set the institute.  The optional argument sets the shortened form.
% 
% This is already implemented in \cls{beamer} and \pkg{beamerarticle} so we only need to copy
% it in for the worksheet class.  In fact, it's a straight-up copy.
%    \begin{macrocode}
%<*worksheet>
\def\institute{\@dblarg\beamer@institute}
\long\def\beamer@institute[#1]#2{%
  \def\beamer@temp{#2}%
  \ifx\beamer@temp\@empty
    \def\insertinstitute{}
  \else
    \def\insertinstitute{\def\inst{\beamer@instinst}\def\and{\beamer@andinst}#2}%
  \fi
 \def\beamer@shortinstitute{#1}}
\institute{}

\def\beamer@instinst#1{{\donotcoloroutermaths$^{#1}$}\ignorespaces}
\def\beamer@andinst{\\[1em]}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\insertshortinstitute}
% Insert the shortened institute name.
%    \begin{macrocode}
\newcommand\insertshortinstitute[1][]{%
  {%
    \let\thanks=\@gobble%
    \def\inst{\beamer@instother}\def\and{\beamer@andother}%
    \beamer@setupshort{#1}%
    \beamer@insertshort{\beamer@shortinstitute}%
  }}
%</worksheet>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lessondescription}
% Set the description of the lesson.  The macro \cmd{\description}
% is already in use by standard \LaTeX for its definition list.
%    \begin{macrocode}
\newcommand{\lessondescription}[1]{
    \def\ngelesson@description{#1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\keyword}
% Add a keyword to the lesson. The list is stored as comma-separated values.  So multiple
% keywords can be set by typing \verb!\keyword{key1,key2}!
%
% \cmd{keywords} is a synonym.
%    \begin{macrocode}
\newtoks\ngelesson@keywords
\newcommand{\keyword}[1]{
	\edef\ngelesson@ekeywords{\the\ngelesson@keywords}
	\def\@emptylist{}
	\ifx\ngelesson@ekeywords\@emptylist
		\ngelesson@keywords{#1}
	\else
		\ngelesson@keywords\expandafter{\the\ngelesson@keywords, #1}
	\fi
}
\let\keywords\keyword
%    \end{macrocode}
% \end{macro}
%
% \section{Writing Metadata}
%
% I'm a nut for metadata.  The major use of this feature is to 
% write a text file with metadata in it so that when I upload to slideshare or Evernote
% I can copy-and-paste easily.  The fields are generated by
% metadata declared in the document preamble.
%
% I used the Turtle\footnote{see \url{http://www.w3.org/TeamSubmission/turtle/}} file format,
% because it is plaintext-based and convertible to RDF.  I have no use for RDF as yet but it 
% may be useful someday when we get the semantic web.
%
% TODO: Since a lesson can have multiple subjects and subjects can have URLs as well as natural-language values,
% this seems like a good application of \LaTeX3 programming, someday.
% 
% Also, RDF seems to be incompatible with Learning Object Metadata, and I want to be able to write that, too.
% Maybe a better workflow would be to produce LOM-XML, then RDF (to include in the PDF as XMP!) and TTL from that.
% But that's not what I intended to do today.
%    \begin{macrocode}
\newwrite\mdfile
\AtEndDocument{
\def\ngelesson@docmode
%<slides>{slides}
%<handout>{handout}
%<plan>{lesson plan}
%<worksheet>{worksheet}
%<*worksheet>
\ifthenelse{\boolean{worksheetsolutions}}{
	\def\ngelesson@docmode{worksheet solutions}
}{}
%</worksheet>
\immediate\openout\mdfile=\jobname.ttl
\message{Writing Metadata to \jobname.ttl}
\immediate\write\mdfile{\string# See http://www.w3.org/TeamSubmission/turtle/ for information about this file format}
\immediate\write\mdfile{\string# http://www.mindswap.org/2002/rdfconvert/ for information about converting to RDF/XML}
\immediate\write\mdfile{}
\immediate\write\mdfile{@prefix dc: <http://purl.org/dc/elements/1.1/> .}
\immediate\write\mdfile{@prefix msc: <http://msc2010.org/msc2007/> . }
\immediate\write\mdfile{}
\immediate\write\mdfile{<\jobname.pdf> dc:title}
\immediate\write\mdfile{"""}
\immediate\write\mdfile{Lesson \ngelesson@lessonnumber: \ngelesson@longtitle\space (\ngelesson@docmode)}
\immediate\write\mdfile{""";}
%\immediate\write\mdfile{  dc:subject <msc:26-XX.html\string#26-01>, \string# expository }
%\immediate\write\mdfile{             <msc:26Axx.html\string#26A06>, \string# one-variable calculus }
%\immediate\write\mdfile{             <msc:26Axx.html\string#26A09>; \string# elementary functions }
\immediate\write\mdfile{<sstags>}
\immediate\write\mdfile{"""}
%\immediate\write\mdfile{\ngelesson@course@code.001.\ngelesson@term@code, \ngelesson@course@code.011.\ngelesson@term@code, \ngelesson@course@code.\ngelesson@term@code, \ngelesson@course@code, \insertcoursename, \@sstags}
\edef\ngelesson@ekeywords{\the\ngelesson@keywords}
\immediate\write\mdfile{\ngelesson@ekeywords}
\immediate\write\mdfile{""";}
\immediate\write\mdfile{dc:description}
\immediate\write\mdfile{"""}
\immediate\write\mdfile{\ngelesson@description}
\immediate\write\mdfile{""";}
\immediate\write\mdfile{dc:rights "All rights reserved".}
\immediate\closeout\mdfile
}
%    \end{macrocode}
%
% \section{Markup}
%
% \begin{macro}{defined}
%    \begin{macrocode}
\def\defined#1{\structure{\textbf{#1}}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Title Page}
% Nothing here is needed yet.
%
% \subsection{Theorem-like environments}
%
% \begin{environment}{practice}
% For student-centered examples.
%    \begin{macrocode}
%<*plan|worksheet>
\RequirePackage{amsthm}
\theoremstyle{theorem}
\newtheorem{proposition}{Proposition}
\newtheorem{practice}{\color{RAPPSOrange}Practice}
\newtheorem*{problem*}{Problem}
%</plan|worksheet>
%    \end{macrocode}
% \end{environment}


%
% \begin{environment}{answer}
%    \begin{macrocode}
\newenvironment{answer}{\begin{block}{Answer}}{\end{block}}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{question}
%    \begin{macrocode}
\newenvironment{question}{\begin{exampleblock}{Question}}{\end{exampleblock}}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{example}
% Beamer's example environment numbers sequentially with the theorem.
% I'd prefer separate enumeration
%    \begin{macrocode}
\let\example\relax
\let\endexample\relax
\theoremstyle{example}
\newtheorem{example}{Example}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{solution}
% Beamer's solution environment numbers sequentially with the theorem.
% I'd prefer it not be numbered at all.
%    \begin{macrocode}
\let\solution\relax
\let\endsolution\relax
\newtheorem*{solution}{Solution}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{remark}
\newtheorem{remark}{Remark}
% \end{environment}
% \begin{environment}{remarks}
\newtheorem{remarks}{Remarks}
% \end{environment}%
% \begin{environment}{definition}
% Definitions.
%    \begin{macrocode}
\let\definition\relax
\let\enddefinition\relax
\theoremstyle{definition}
\newtheorem*{definition}{Definition}
%    \end{macrocode}
% \end{environment}


%
%
% \section{Handout layout}
% \changes{unreleased}{2020/02/19}{Removed some workaround code that stopped working}
%    \begin{macrocode}
%<*handout>
\RequirePackage{handoutlayout}
\pgfpagesuselayout{3 on 1 with notes}[letterpaper]
%</handout>
%    \end{macrocode}
%
% \section{Lesson Plan}
%
% We use beamer's article mode.
%    \begin{macrocode}
\newcommand{\timecheck}[1]{}
%<*plan>
\renewcommand{\timecheck}[1]{\mode<article>{\marginpar{\textsc{#1}}}}
%</plan>
%    \end{macrocode}
%
% \begin{macro}{\notetoself}
% Simple note to self.  Does it need to be guarded (i.e., disabled in presentation mode?)
%    \begin{macrocode}
\newcommand{\notetoself}[1]{\marginpar{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Do}
% \begin{macro}{\Say}
% Colorful see/do environments as in RAPPS scripts
%    \begin{macrocode}
\definecolor{RAPPSBlue}{RGB}{54,95,145}
\definecolor{RAPPSOrange}{RGB}{227,108,10}
\newcommand{\Say}[1]{%
	{Say: \bfseries\color{RAPPSBlue}``#1''}%
}
\newcommand{\Do}[1]{%
	{\color{RAPPSOrange}\itshape (#1)}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}

% \section{Worksheet}
%
%    \begin{macrocode}
%<*worksheet>
%    \end{macrocode} 
% 
%    \begin{macrocode}
\RequirePackage[letterpaper]{geometry}
\RequirePackage[twocolumn]{multicol}
%    \end{macrocode}
%
%  The \cls{beamer} class uses the \pkg{enumerate} package but I like \pkg{enumitem} better.
%    \begin{macrocode}
\RequirePackage{enumitem}
%\everymath={\displaystyle}
%    \end{macrocode}
%
% The \pkg{amsthm} package provides lots of callout-like environments
%    \begin{macrocode}
\RequirePackage{amsthm}
%    \end{macrocode}
%
% \begin{macro}{\maketitle}
%    \begin{macrocode}
\usepackage{fancyhdr}
\setlength{\headheight}{25pt}
\lhead{
   \ngelesson@course@code%
   \ifx\insertcoursesectionnumber\@empty\else.\insertcoursesectionnumber\fi
   \ \insertcoursename
   \\ 
   \let\\:\@title}
\rhead{Name:
\ifthenelse{\boolean{worksheetsolutions}}{%
  \underline{\raisebox{1pt}{\makebox[3in]{\color{red}\sffamily\Large Solutions}}}
  }{% else
  \rule{3in}{0.4pt}
}
\\ \@date}
\cfoot{\thepage}
\renewcommand{\maketitle}{\thispagestyle{fancy}}
\AtBeginDocument{\pagestyle{plain}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{environment}{solution}
% Declare the solution to a problem.  Without the \clo{solutions} option the environment
% eats its body (by aliasing the environment to the \env{comment} environment).  With the
% \clo{solutions} class option the environment sets its body like in \env{proof}.
%    \begin{macrocode}
\let\solution=\comment
\let\endsolution=\endcomment
\ifthenelse{\boolean{worksheetsolutions}}{
    \renewenvironment{solution}{\begin{proof}[Solution]}{\end{proof}}
}{}
%    \end{macrocode}
% \end{environment}
% \begin{environment}{answer}
% Declare the answer to a problem.  Without the \clo{solutions} option the environment
% eats its body (by aliasing the environment to the \env{comment} environment). With the
% \clo{solutions} class option the environment sets its body like in \env{proof}.
%
% The difference between an answer and a solution is that the solution includes the procedure for
% arriving at the answer. 
%    \begin{macrocode}
\let\oldanswer=\answer
\let\oldendanswer=\endanswer
\let\answer=\comment
\let\endanswer=\endcomment
\ifthenelse{\boolean{worksheetsolutions}}{
    \renewenvironment{answer}{\begin{proof}[Answer]}{\end{proof}}
}{}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{hint}
% Declare a hint to the problem.
%    \begin{macrocode}
\theoremstyle{remark}
\newtheorem*{hint}{Hint} 
%    \end{macrocode}
% \end{environment}
%
% \subsection{Extra space}
% Worksheets need space to work in, but not when the solutions are being shown.
%
% \begin{macro}{\workspace}
% Insert as much space as possible (a \cmd{\vfill}'s worth), but only in solution mode. 
%    \begin{macrocode}
\ifthenelse{\boolean{worksheetsolutions}}{
	\let\workspace=\vfill
} {
    \let\workspace=\relax
}	
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\vfillifnosolutions}
% Deprecated synonym for \cmd{\workspace}.
%    \begin{macrocode}
\let\vfillifnosolutions=\workspace
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\wsclearpage}
% Clear the page, but only in solutions mode.
%    \begin{macrocode}
\ifthenelse{\boolean{worksheetsolutions}}{
	\let\wsclearpage=\clearpage
} {
    \let\wsclearpage=\relax
}	
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\clearpageifnosolutions}
% Deprecated synonym for \cmd{\wsclearpage}.
%    \begin{macrocode}
\let\clearpageifnosolutions=\wsclearpage
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Problems}
%
%    \begin{macrocode}
\newcounter{problems}
\newcommand{\theproblem}{{\upshape\bfseries\arabic{problems}.}}
%    \end{macrocode}
%
% \begin{macro}{\problem}
%    \begin{macrocode}
\newcommand{\problem}{\noindent\refstepcounter{problems}\theproblem\hspace{1em}\problemfont}
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{problems}
%    \begin{macrocode}
\newenvironment{problems}
{\begin{list}
	{\refstepcounter{problems}\theproblem}{\problemfont}}
{\end{list}}
%    \end{macrocode}
% \end{environment}
%
%    \begin{macrocode}
\newcommand{\problemfont}{\normalfont}
\AtBeginDocument{\date{\ngelesson@term}}

\ifthenelse{\boolean{worksheetsolutions}}{
    \let\wstitle=\@title
    \title{Solutions to \wstitle}
    \let\clearpageifnosolutions=\relax
    \let\wsclearpage=\relax
    \renewcommand{\problemfont}{\normalfont\itshape}
}{}
%</worksheet>
%    \end{macrocode}
%
% We're done!
%    \begin{macrocode}
%</classes>
%    \end{macrocode}
%\Finale